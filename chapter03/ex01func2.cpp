#include <iostream>
using namespace std;

int main(int argc, char const *argv[]){
    int n;
    n = max(2, 3);
    cout << "Function Call Result : " << n << endl;
    return 0;
}

int max(int x, int y){
    if(x>y)
        return x;
    else 
        return y;
}




//함수의 정의. 
//중괄호로 범위를 지정하고 문장을 작성.
// 반환할때는 데이터타입이 일치해야함

//함수 호출: 호출은 함수이름부르고 매개변수에 값을 주면 된다.
//자바는 메서드 배치 순서에 영향없이 호출
// 자바스크립트도 함수 배치순서에 영향없이 호출 ??!
//단. 호이스팅. onload 등 위치의 고려사항있음
// c/c++도 배치순서가 상관없다.  
//(그러나 과거 c++낮은 버전은 배치순서영향있었다.) 컴파일러가 순차적으로 번역하기 때문.
// 파이썬은?

// 자바는 클래스 1개당 파일하나 (파일명은 클래스이름과 같게) 이렇게 소스관리
//c++는 자발자가 직접. 여러 파일로 소스 분리. 하는 일에 성격에 따라 구분지음 
// 파일을 컴파일할 때 파일별로 컴파일한다.
// 컴파일. exe 링킹

//int a (); 함수 원형 ==> () 있으면 함수다
// int a; 변수선언.

//함수원형만 모아서 헤더파일로 만들고.
//헤더파일을 include시켜서 다른 파일에서도 그 함수를 사용.

//헤더파일: 함수 원형만 모아서 기술한 파일

//함수를 만드는 이유
//1.코드 관리를 쉽게하기위해서
//2.재사용하기위해서(반복작업을 줄여준다. 코드중복x)

//단일 책임 원칙(Single Responsibility Principle, SRP)
//1개 함수는 1가지 일만 해야한다.

//데이터베이스에서도 중복데이터는 분리시켜야함. 중복은 수정할때 문제됨.

